
Build Error
Failed to compile

./pages/user/friends.tsx
Error: 
  × the name `friends` is defined multiple times
    ╭─[/home/runner/workspace/pages/user/friends.tsx:15:1]
 15 │   const [searchQuery, setSearchQuery] = useState('');
 16 │   const [users, setUsers] = useState<User[]>([]);
 17 │   const [filteredUsers, setFilteredUsers] = useState<User[]>([]);
 18 │   const [friends, setFriends] = useState<User[]>([]);
    ·          ───┬───
    ·             ╰── previous definition of `friends` here
 19 │   const [filteredFriends, setFilteredFriends] = useState<User[]>([]);
 20 │   const [sentRequests, setSentRequests] = useState<Set<string>>(new Set());
 21 │ 
 22 │   useEffect(() => {
 23 │     fetchUsers();
 24 │     fetchFriends();
 25 │     fetchSentRequests();
 26 │ 
 27 │     const handleFriendRequest = () => {
 28 │       fetchUsers();
 29 │       fetchFriends();
 30 │       fetchSentRequests();
 31 │     };
 32 │ 
 33 │     window.addEventListener('friendRequestHandled', handleFriendRequest);
 34 │     return () => window.removeEventListener('friendRequestHandled', handleFriendRequest);
 35 │   }, []);
 36 │ 
 37 │   const fetchSentRequests = async () => {
 38 │     try {
 39 │       const token = localStorage.getItem('token');
 40 │       const response = await fetch('/api/friend-requests', {
 41 │         headers: {
 42 │           'Authorization': `Bearer ${token}`
 43 │         }
 44 │       });
 45 │       if (response.ok) {
 46 │         const data = await response.json();
 47 │         setSentRequests(new Set(data.data));
 48 │       }
 49 │     } catch (error) {
 50 │       console.error('Error fetching sent requests:', error);
 51 │     }
 52 │   };
 53 │ 
 54 │   useEffect(() => {
 55 │     if (activeTab === 'players') {
 56 │       const filtered = users.filter(user => 
 57 │         user.name.toLowerCase().includes(searchQuery.toLowerCase())
 58 │       );
 59 │       setFilteredUsers(filtered);
 60 │     } else {
 61 │       const filtered = friends.filter(friend => 
 62 │         friend.name.toLowerCase().includes(searchQuery.toLowerCase())
 63 │       );
 64 │       setFilteredFriends(filtered);
 65 │     }
 66 │   }, [searchQuery, users, friends, activeTab]);
 67 │ 
 68 │   const fetchUsers = async () => {
 69 │     try {
 70 │       const token = localStorage.getItem('token');
 71 │       const response = await fetch('/api/users', {
 72 │         headers: {
 73 │           'Authorization': `Bearer ${token}`
 74 │         }
 75 │       });
 76 │       if (response.ok) {
 77 │         const data = await response.json();
 78 │         setUsers(data.data);
 79 │         setFilteredUsers(data.data);
 80 │       }
 81 │     } catch (error) {
 82 │       console.error('Error fetching users:', error);
 83 │     }
 84 │   };
 85 │ 
 86 │   const [friends, setFriends] = useState<User[]>([]);
    ·          ───┬───
    ·             ╰── `friends` redefined here
 87 │   
 88 │ 
 89 │   useEffect(() => {
    ╰────

  × the name `setFriends` is defined multiple times
    ╭─[/home/runner/workspace/pages/user/friends.tsx:15:1]
 15 │   const [searchQuery, setSearchQuery] = useState('');
 16 │   const [users, setUsers] = useState<User[]>([]);
 17 │   const [filteredUsers, setFilteredUsers] = useState<User[]>([]);
 18 │   const [friends, setFriends] = useState<User[]>([]);
    ·                   ─────┬────
    ·                        ╰── previous definition of `setFriends` here
 19 │   const [filteredFriends, setFilteredFriends] = useState<User[]>([]);
 20 │   const [sentRequests, setSentRequests] = useState<Set<string>>(new Set());
 21 │ 
 22 │   useEffect(() => {
 23 │     fetchUsers();
 24 │     fetchFriends();
 25 │     fetchSentRequests();
 26 │ 
 27 │     const handleFriendRequest = () => {
 28 │       fetchUsers();
 29 │       fetchFriends();
 30 │       fetchSentRequests();
 31 │     };
 32 │ 
 33 │     window.addEventListener('friendRequestHandled', handleFriendRequest);
 34 │     return () => window.removeEventListener('friendRequestHandled', handleFriendRequest);
 35 │   }, []);
 36 │ 
 37 │   const fetchSentRequests = async () => {
 38 │     try {
 39 │       const token = localStorage.getItem('token');
 40 │       const response = await fetch('/api/friend-requests', {
 41 │         headers: {
 42 │           'Authorization': `Bearer ${token}`
 43 │         }
 44 │       });
 45 │       if (response.ok) {
 46 │         const data = await response.json();
 47 │         setSentRequests(new Set(data.data));
 48 │       }
 49 │     } catch (error) {
 50 │       console.error('Error fetching sent requests:', error);
 51 │     }
 52 │   };
 53 │ 
 54 │   useEffect(() => {
 55 │     if (activeTab === 'players') {
 56 │       const filtered = users.filter(user => 
 57 │         user.name.toLowerCase().includes(searchQuery.toLowerCase())
 58 │       );
 59 │       setFilteredUsers(filtered);
 60 │     } else {
 61 │       const filtered = friends.filter(friend => 
 62 │         friend.name.toLowerCase().includes(searchQuery.toLowerCase())
 63 │       );
 64 │       setFilteredFriends(filtered);
 65 │     }
 66 │   }, [searchQuery, users, friends, activeTab]);
 67 │ 
 68 │   const fetchUsers = async () => {
 69 │     try {
 70 │       const token = localStorage.getItem('token');
 71 │       const response = await fetch('/api/users', {
 72 │         headers: {
 73 │           'Authorization': `Bearer ${token}`
 74 │         }
 75 │       });
 76 │       if (response.ok) {
 77 │         const data = await response.json();
 78 │         setUsers(data.data);
 79 │         setFilteredUsers(data.data);
 80 │       }
 81 │     } catch (error) {
 82 │       console.error('Error fetching users:', error);
 83 │     }
 84 │   };
 85 │ 
 86 │   const [friends, setFriends] = useState<User[]>([]);
    ·                   ─────┬────
    ·                        ╰── `setFriends` redefined here
 87 │   
 88 │ 
 89 │   useEffect(() => {
    ╰────
This error occurred during the build process and can only be dismissed by fixing the error.