./pages/chat.tsx
Error: 
  × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/pages/chat.tsx:1:1]
   1 │ import { useState, useEffect } from "react";
     ·          ────┬───
     ·              ╰── previous definition of `useState` here
   2 │ import {
   3 │   Box,
   4 │   Grid,
   5 │   Paper,
   6 │   List,
   7 │   ListItem,
   8 │   ListItemAvatar,
   9 │   Avatar,
  10 │   ListItemText,
  11 │   CircularProgress,
  12 │ } from "@mui/material";
  13 │ import UserDashboardLayout from "../components/layouts/UserDashboardLayout";
  14 │ import ChatWindow from "../components/chat/ChatWindow";
  15 │ import { useSession } from "next-auth/react";
  16 │ 
  17 │ interface User {
  18 │   _id: string;
  19 │   name: string;
  20 │   profileImage?: string;
  21 │ }
  22 │ 
  23 │ export default function ChatPage() {
  24 │   const [users, setUsers] = useState<User[]>([]);
  25 │   const [selectedUser, setSelectedUser] = useState<User | null>(null);
  26 │   const [currentUser, setCurrentUser] = useState<User | null>(null);
  27 │   const [loading, setLoading] = useState(true);
  28 │   const [error, setError] = useState<string | null>(null);
  29 │   const session = useSession();
  30 │   useEffect(() => {
  31 │     if (session.data) {
  32 │       const fetchUsers = async () => {
  33 │         try {
  34 │           setLoading(true);
  35 │           const response =
  36 │             session.data.user.role == "Admin"
  37 │               ? await fetch("/api/users")
  38 │               : await fetch("/api/users/me/friends?others=true");
  39 │           if (!response.ok) {
  40 │             throw new Error("Failed to fetch users");
  41 │           }
  42 │           const data = await response.json();
  43 │           if (session.data.user.role !== "Admin") {
  44 │             setUsers([
  45 │               ...data.data,
  46 │               {
  47 │                 _id: "6792d847811967dbede75c5b",
  48 │                 name: "Admin ",
  49 │                 email: "admin@admin.com",
  50 │                 cName: "talal@theappguys.com",
  51 │                 role: "Admin",
  52 │               },
  53 │             ]);
  54 │           } else {
  55 │             setUsers(data.data.filter((user) => user.role !== "Admin"));
  56 │           }
  57 │         } catch (error) {
  58 │           console.error("Error fetching users:", error);
  59 │           setError("Failed to load users");
  60 │         } finally {
  61 │           setLoading(false);
  62 │         }
  63 │       };
  64 │ 
  65 │       fetchUsers();
  66 │     }
  67 │   }, [session.data]);
  68 │ 
  69 │   useEffect(() => {
  70 │     if (session.data?.user?.id && session.data.user.name) {
  71 │       setCurrentUser({
  72 │         _id: session.data.user.id,
  73 │         name: session.data.user.name,
  74 │         profileImage: session.data.user.profileImage,
  75 │       });
  76 │     }
  77 │   }, [session.data]);
  78 │ 
  79 │   if (loading) {
  80 │     return (
  81 │       <UserDashboardLayout>
  82 │         <Box
  83 │           display="flex"
  84 │           justifyContent="center"
  85 │           alignItems="center"
  86 │           height="100vh"
  87 │         >
  88 │           <CircularProgress />
  89 │         </Box>
  90 │       </UserDashboardLayout>
  91 │     );
  92 │   }
  93 │ 
  94 │   if (error) {
  95 │     return (
  96 │       <UserDashboardLayout>
  97 │         <Box
  98 │           display="flex"
  99 │           justifyContent="center"
 100 │           alignItems="center"
 101 │           height="100vh"
 102 │         >
 103 │           {error}
 104 │         </Box>
 105 │       </UserDashboardLayout>
 106 │     );
 107 │   }
 108 │ 
 109 │   return (
 110 │     <UserDashboardLayout>
 111 │       <Box sx={{ flexGrow: 1, height: "calc(100vh - 100px)" }}>
 112 │         <Grid container spacing={2} sx={{ height: "100%" }}>
 113 │           <Grid item xs={3}>
 114 │             <Paper sx={{ height: "100%", overflow: "auto" }}>
 115 │               <List>
 116 │                 {users &&
 117 │                   users.map((user) => (
 118 │                     <ListItem
 119 │                       button
 120 │                       key={user._id}
 121 │                       selected={selectedUser?._id === user._id}
 122 │                       onClick={() => setSelectedUser(user)}
 123 │                     >
 124 │                       <ListItemAvatar>
 125 │                         <Avatar src={user.profileImage} />
 126 │                       </ListItemAvatar>
 127 │                       <ListItemText primary={user.name} />
 128 │                     </ListItem>
 129 │                   ))}
 130 │               </List>
 131 │             </Paper>
 132 │           </Grid>
 133 │           <Grid item xs={9}>
 134 │             <Paper sx={{ height: "100%" }}>
 135 │               {selectedUser && currentUser ? (
 136 │                 <ChatWindow currentUser={currentUser} receiver={selectedUser} />
 137 │               ) : (
 138 │                 <Box
 139 │                   sx={{
 140 │                     display: "flex",
 141 │                     justifyContent: "center",
 142 │                     alignItems: "center",
 143 │                     height: "100%",
 144 │                     color: "text.secondary",
 145 │                   }}
 146 │                 >
 147 │                   Select a user to start chatting
 148 │                 </Box>
 149 │               )}
 150 │             </Paper>
 151 │           </Grid>
 152 │         </Grid>
 153 │       </Box>
 154 │     </UserDashboardLayout>
 155 │   );
 156 │ }
 157 │ 
 158 │ import { useState, useEffect } from 'react';
     ·          ────┬───
     ·              ╰── `useState` redefined here
 159 │ import { useSession } from 'next-auth/react';
 160 │ import { useRouter } from 'next/router';
 161 │ import UserDashboardLayout from '../components/layouts/UserDashboardLayout';
     ╰────

  × the name `useEffect` is defined multiple times
     ╭─[/home/runner/workspace/pages/chat.tsx:1:1]
   1 │ import { useState, useEffect } from "react";
     ·                    ────┬────
     ·                        ╰── previous definition of `useEffect` here
   2 │ import {
   3 │   Box,
   4 │   Grid,
   5 │   Paper,
   6 │   List,
   7 │   ListItem,
   8 │   ListItemAvatar,
   9 │   Avatar,
  10 │   ListItemText,
  11 │   CircularProgress,
  12 │ } from "@mui/material";
  13 │ import UserDashboardLayout from "../components/layouts/UserDashboardLayout";
  14 │ import ChatWindow from "../components/chat/ChatWindow";
  15 │ import { useSession } from "next-auth/react";
  16 │ 
  17 │ interface User {
  18 │   _id: string;
  19 │   name: string;
  20 │   profileImage?: string;
  21 │ }
  22 │ 
  23 │ export default function ChatPage() {
  24 │   const [users, setUsers] = useState<User[]>([]);
  25 │   const [selectedUser, setSelectedUser] = useState<User | null>(null);
  26 │   const [currentUser, setCurrentUser] = useState<User | null>(null);
  27 │   const [loading, setLoading] = useState(true);
  28 │   const [error, setError] = useState<string | null>(null);
  29 │   const session = useSession();
  30 │   useEffect(() => {
  31 │     if (session.data) {
  32 │       const fetchUsers = async () => {
  33 │         try {
  34 │           setLoading(true);
  35 │           const response =
  36 │             session.data.user.role == "Admin"
  37 │               ? await fetch("/api/users")
  38 │               : await fetch("/api/users/me/friends?others=true");
  39 │           if (!response.ok) {
  40 │             throw new Error("Failed to fetch users");
  41 │           }
  42 │           const data = await response.json();
  43 │           if (session.data.user.role !== "Admin") {
  44 │             setUsers([
  45 │               ...data.data,
  46 │               {
  47 │                 _id: "6792d847811967dbede75c5b",
  48 │                 name: "Admin ",
  49 │                 email: "admin@admin.com",
  50 │                 cName: "talal@theappguys.com",
  51 │                 role: "Admin",
  52 │               },
  53 │             ]);
  54 │           } else {
  55 │             setUsers(data.data.filter((user) => user.role !== "Admin"));
  56 │           }
  57 │         } catch (error) {
  58 │           console.error("Error fetching users:", error);
  59 │           setError("Failed to load users");
  60 │         } finally {
  61 │           setLoading(false);
  62 │         }
  63 │       };
  64 │ 
  65 │       fetchUsers();
  66 │     }
  67 │   }, [session.data]);
  68 │ 
  69 │   useEffect(() => {
  70 │     if (session.data?.user?.id && session.data.user.name) {
  71 │       setCurrentUser({
  72 │         _id: session.data.user.id,
  73 │         name: session.data.user.name,
  74 │         profileImage: session.data.user.profileImage,
  75 │       });
  76 │     }
  77 │   }, [session.data]);
  78 │ 
  79 │   if (loading) {
  80 │     return (
  81 │       <UserDashboardLayout>
  82 │         <Box
  83 │           display="flex"
  84 │           justifyContent="center"
  85 │           alignItems="center"
  86 │           height="100vh"
  87 │         >
  88 │           <CircularProgress />
  89 │         </Box>
  90 │       </UserDashboardLayout>
  91 │     );
  92 │   }
  93 │ 
  94 │   if (error) {
  95 │     return (
  96 │       <UserDashboardLayout>
  97 │         <Box
  98 │           display="flex"
  99 │           justifyContent="center"
 100 │           alignItems="center"
 101 │           height="100vh"
 102 │         >
 103 │           {error}
 104 │         </Box>
 105 │       </UserDashboardLayout>
 106 │     );
 107 │   }
 108 │ 
 109 │   return (
 110 │     <UserDashboardLayout>
 111 │       <Box sx={{ flexGrow: 1, height: "calc(100vh - 100px)" }}>
 112 │         <Grid container spacing={2} sx={{ height: "100%" }}>
 113 │           <Grid item xs={3}>
 114 │             <Paper sx={{ height: "100%", overflow: "auto" }}>
 115 │               <List>
 116 │                 {users &&
 117 │                   users.map((user) => (
 118 │                     <ListItem
 119 │                       button
 120 │                       key={user._id}
 121 │                       selected={selectedUser?._id === user._id}
 122 │                       onClick={() => setSelectedUser(user)}
 123 │                     >
 124 │                       <ListItemAvatar>
 125 │                         <Avatar src={user.profileImage} />
 126 │                       </ListItemAvatar>
 127 │                       <ListItemText primary={user.name} />
 128 │                     </ListItem>
 129 │                   ))}
 130 │               </List>
 131 │             </Paper>
 132 │           </Grid>
 133 │           <Grid item xs={9}>
 134 │             <Paper sx={{ height: "100%" }}>
 135 │               {selectedUser && currentUser ? (
 136 │                 <ChatWindow currentUser={currentUser} receiver={selectedUser} />
 137 │               ) : (
 138 │                 <Box
 139 │                   sx={{
 140 │                     display: "flex",
 141 │                     justifyContent: "center",
 142 │                     alignItems: "center",
 143 │                     height: "100%",
 144 │                     color: "text.secondary",
 145 │                   }}
 146 │                 >
 147 │                   Select a user to start chatting
 148 │                 </Box>
 149 │               )}
 150 │             </Paper>
 151 │           </Grid>
 152 │         </Grid>
 153 │       </Box>
 154 │     </UserDashboardLayout>
 155 │   );
 156 │ }
 157 │ 
 158 │ import { useState, useEffect } from 'react';
     ·                    ────┬────
     ·                        ╰── `useEffect` redefined here
 159 │ import { useSession } from 'next-auth/react';
 160 │ import { useRouter } from 'next/router';
 161 │ import UserDashboardLayout from '../components/layouts/UserDashboardLayout';
     ╰────

  × the name `useSession` is defined multiple times
     ╭─[/home/runner/workspace/pages/chat.tsx:12:1]
  12 │ } from "@mui/material";
  13 │ import UserDashboardLayout from "../components/layouts/UserDashboardLayout";
  14 │ import ChatWindow from "../components/chat/ChatWindow";
  15 │ import { useSession } from "next-auth/react";
     ·          ─────┬────
     ·               ╰── previous definition of `useSession` here
  16 │ 
  17 │ interface User {
  18 │   _id: string;
  19 │   name: string;
  20 │   profileImage?: string;
  21 │ }
  22 │ 
  23 │ export default function ChatPage() {
  24 │   const [users, setUsers] = useState<User[]>([]);
  25 │   const [selectedUser, setSelectedUser] = useState<User | null>(null);
  26 │   const [currentUser, setCurrentUser] = useState<User | null>(null);
  27 │   const [loading, setLoading] = useState(true);
  28 │   const [error, setError] = useState<string | null>(null);
  29 │   const session = useSession();
  30 │   useEffect(() => {
  31 │     if (session.data) {
  32 │       const fetchUsers = async () => {
  33 │         try {
  34 │           setLoading(true);
  35 │           const response =
  36 │             session.data.user.role == "Admin"
  37 │               ? await fetch("/api/users")
  38 │               : await fetch("/api/users/me/friends?others=true");
  39 │           if (!response.ok) {
  40 │             throw new Error("Failed to fetch users");
  41 │           }
  42 │           const data = await response.json();
  43 │           if (session.data.user.role !== "Admin") {
  44 │             setUsers([
  45 │               ...data.data,
  46 │               {
  47 │                 _id: "6792d847811967dbede75c5b",
  48 │                 name: "Admin ",
  49 │                 email: "admin@admin.com",
  50 │                 cName: "talal@theappguys.com",
  51 │                 role: "Admin",
  52 │               },
  53 │             ]);
  54 │           } else {
  55 │             setUsers(data.data.filter((user) => user.role !== "Admin"));
  56 │           }
  57 │         } catch (error) {
  58 │           console.error("Error fetching users:", error);
  59 │           setError("Failed to load users");
  60 │         } finally {
  61 │           setLoading(false);
  62 │         }
  63 │       };
  64 │ 
  65 │       fetchUsers();
  66 │     }
  67 │   }, [session.data]);
  68 │ 
  69 │   useEffect(() => {
  70 │     if (session.data?.user?.id && session.data.user.name) {
  71 │       setCurrentUser({
  72 │         _id: session.data.user.id,
  73 │         name: session.data.user.name,
  74 │         profileImage: session.data.user.profileImage,
  75 │       });
  76 │     }
  77 │   }, [session.data]);
  78 │ 
  79 │   if (loading) {
  80 │     return (
  81 │       <UserDashboardLayout>
  82 │         <Box
  83 │           display="flex"
  84 │           justifyContent="center"
  85 │           alignItems="center"
  86 │           height="100vh"
  87 │         >
  88 │           <CircularProgress />
  89 │         </Box>
  90 │       </UserDashboardLayout>
  91 │     );
  92 │   }
  93 │ 
  94 │   if (error) {
  95 │     return (
  96 │       <UserDashboardLayout>
  97 │         <Box
  98 │           display="flex"
  99 │           justifyContent="center"
 100 │           alignItems="center"
 101 │           height="100vh"
 102 │         >
 103 │           {error}
 104 │         </Box>
 105 │       </UserDashboardLayout>
 106 │     );
 107 │   }
 108 │ 
 109 │   return (
 110 │     <UserDashboardLayout>
 111 │       <Box sx={{ flexGrow: 1, height: "calc(100vh - 100px)" }}>
 112 │         <Grid container spacing={2} sx={{ height: "100%" }}>
 113 │           <Grid item xs={3}>
 114 │             <Paper sx={{ height: "100%", overflow: "auto" }}>
 115 │               <List>
 116 │                 {users &&
 117 │                   users.map((user) => (
 118 │                     <ListItem
 119 │                       button
 120 │                       key={user._id}
 121 │                       selected={selectedUser?._id === user._id}
 122 │                       onClick={() => setSelectedUser(user)}
 123 │                     >
 124 │                       <ListItemAvatar>
 125 │                         <Avatar src={user.profileImage} />
 126 │                       </ListItemAvatar>
 127 │                       <ListItemText primary={user.name} />
 128 │                     </ListItem>
 129 │                   ))}
 130 │               </List>
 131 │             </Paper>
 132 │           </Grid>
 133 │           <Grid item xs={9}>
 134 │             <Paper sx={{ height: "100%" }}>
 135 │               {selectedUser && currentUser ? (
 136 │                 <ChatWindow currentUser={currentUser} receiver={selectedUser} />
 137 │               ) : (
 138 │                 <Box
 139 │                   sx={{
 140 │                     display: "flex",
 141 │                     justifyContent: "center",
 142 │                     alignItems: "center",
 143 │                     height: "100%",
 144 │                     color: "text.secondary",
 145 │                   }}
 146 │                 >
 147 │                   Select a user to start chatting
 148 │                 </Box>
 149 │               )}
 150 │             </Paper>
 151 │           </Grid>
 152 │         </Grid>
 153 │       </Box>
 154 │     </UserDashboardLayout>
 155 │   );
 156 │ }
 157 │ 
 158 │ import { useState, useEffect } from 'react';
 159 │ import { useSession } from 'next-auth/react';
     ·          ─────┬────
     ·               ╰── `useSession` redefined here
 160 │ import { useRouter } from 'next/router';
 161 │ import UserDashboardLayout from '../components/layouts/UserDashboardLayout';
 162 │ import ChatWindow from '../components/chat/ChatWindow';
     ╰────

  × the name `UserDashboardLayout` is defined multiple times
     ╭─[/home/runner/workspace/pages/chat.tsx:10:1]
  10 │   ListItemText,
  11 │   CircularProgress,
  12 │ } from "@mui/material";
  13 │ import UserDashboardLayout from "../components/layouts/UserDashboardLayout";
     ·        ─────────┬─────────
     ·                 ╰── previous definition of `UserDashboardLayout` here
  14 │ import ChatWindow from "../components/chat/ChatWindow";
  15 │ import { useSession } from "next-auth/react";
  16 │ 
  17 │ interface User {
  18 │   _id: string;
  19 │   name: string;
  20 │   profileImage?: string;
  21 │ }
  22 │ 
  23 │ export default function ChatPage() {
  24 │   const [users, setUsers] = useState<User[]>([]);
  25 │   const [selectedUser, setSelectedUser] = useState<User | null>(null);
  26 │   const [currentUser, setCurrentUser] = useState<User | null>(null);
  27 │   const [loading, setLoading] = useState(true);
  28 │   const [error, setError] = useState<string | null>(null);
  29 │   const session = useSession();
  30 │   useEffect(() => {
  31 │     if (session.data) {
  32 │       const fetchUsers = async () => {
  33 │         try {
  34 │           setLoading(true);
  35 │           const response =
  36 │             session.data.user.role == "Admin"
  37 │               ? await fetch("/api/users")
  38 │               : await fetch("/api/users/me/friends?others=true");
  39 │           if (!response.ok) {
  40 │             throw new Error("Failed to fetch users");
  41 │           }
  42 │           const data = await response.json();
  43 │           if (session.data.user.role !== "Admin") {
  44 │             setUsers([
  45 │               ...data.data,
  46 │               {
  47 │                 _id: "6792d847811967dbede75c5b",
  48 │                 name: "Admin ",
  49 │                 email: "admin@admin.com",
  50 │                 cName: "talal@theappguys.com",
  51 │                 role: "Admin",
  52 │               },
  53 │             ]);
  54 │           } else {
  55 │             setUsers(data.data.filter((user) => user.role !== "Admin"));
  56 │           }
  57 │         } catch (error) {
  58 │           console.error("Error fetching users:", error);
  59 │           setError("Failed to load users");
  60 │         } finally {
  61 │           setLoading(false);
  62 │         }
  63 │       };
  64 │ 
  65 │       fetchUsers();
  66 │     }
  67 │   }, [session.data]);
  68 │ 
  69 │   useEffect(() => {
  70 │     if (session.data?.user?.id && session.data.user.name) {
  71 │       setCurrentUser({
  72 │         _id: session.data.user.id,
  73 │         name: session.data.user.name,
  74 │         profileImage: session.data.user.profileImage,
  75 │       });
  76 │     }
  77 │   }, [session.data]);
  78 │ 
  79 │   if (loading) {
  80 │     return (
  81 │       <UserDashboardLayout>
  82 │         <Box
  83 │           display="flex"
  84 │           justifyContent="center"
  85 │           alignItems="center"
  86 │           height="100vh"
  87 │         >
  88 │           <CircularProgress />
  89 │         </Box>
  90 │       </UserDashboardLayout>
  91 │     );
  92 │   }
  93 │ 
  94 │   if (error) {
  95 │     return (
  96 │       <UserDashboardLayout>
  97 │         <Box
  98 │           display="flex"
  99 │           justifyContent="center"
 100 │           alignItems="center"
 101 │           height="100vh"
 102 │         >
 103 │           {error}
 104 │         </Box>
 105 │       </UserDashboardLayout>
 106 │     );
 107 │   }
 108 │ 
 109 │   return (
 110 │     <UserDashboardLayout>
 111 │       <Box sx={{ flexGrow: 1, height: "calc(100vh - 100px)" }}>
 112 │         <Grid container spacing={2} sx={{ height: "100%" }}>
 113 │           <Grid item xs={3}>
 114 │             <Paper sx={{ height: "100%", overflow: "auto" }}>
 115 │               <List>
 116 │                 {users &&
 117 │                   users.map((user) => (
 118 │                     <ListItem
 119 │                       button
 120 │                       key={user._id}
 121 │                       selected={selectedUser?._id === user._id}
 122 │                       onClick={() => setSelectedUser(user)}
 123 │                     >
 124 │                       <ListItemAvatar>
 125 │                         <Avatar src={user.profileImage} />
 126 │                       </ListItemAvatar>
 127 │                       <ListItemText primary={user.name} />
 128 │                     </ListItem>
 129 │                   ))}
 130 │               </List>
 131 │             </Paper>
 132 │           </Grid>
 133 │           <Grid item xs={9}>
 134 │             <Paper sx={{ height: "100%" }}>
 135 │               {selectedUser && currentUser ? (
 136 │                 <ChatWindow currentUser={currentUser} receiver={selectedUser} />
 137 │               ) : (
 138 │                 <Box
 139 │                   sx={{
 140 │                     display: "flex",
 141 │                     justifyContent: "center",
 142 │                     alignItems: "center",
 143 │                     height: "100%",
 144 │                     color: "text.secondary",
 145 │                   }}
 146 │                 >
 147 │                   Select a user to start chatting
 148 │                 </Box>
 149 │               )}
 150 │             </Paper>
 151 │           </Grid>
 152 │         </Grid>
 153 │       </Box>
 154 │     </UserDashboardLayout>
 155 │   );
 156 │ }
 157 │ 
 158 │ import { useState, useEffect } from 'react';
 159 │ import { useSession } from 'next-auth/react';
 160 │ import { useRouter } from 'next/router';
 161 │ import UserDashboardLayout from '../components/layouts/UserDashboardLayout';
     ·        ─────────┬─────────
     ·                 ╰── `UserDashboardLayout` redefined here
 162 │ import ChatWindow from '../components/chat/ChatWindow';
 163 │ import { Container } from 'reactstrap';
     ╰────

  × the name `ChatWindow` is defined multiple times
     ╭─[/home/runner/workspace/pages/chat.tsx:11:1]
  11 │   CircularProgress,
  12 │ } from "@mui/material";
  13 │ import UserDashboardLayout from "../components/layouts/UserDashboardLayout";
  14 │ import ChatWindow from "../components/chat/ChatWindow";
     ·        ─────┬────
     ·             ╰── previous definition of `ChatWindow` here
  15 │ import { useSession } from "next-auth/react";
  16 │ 
  17 │ interface User {
  18 │   _id: string;
  19 │   name: string;
  20 │   profileImage?: string;
  21 │ }
  22 │ 
  23 │ export default function ChatPage() {
  24 │   const [users, setUsers] = useState<User[]>([]);
  25 │   const [selectedUser, setSelectedUser] = useState<User | null>(null);
  26 │   const [currentUser, setCurrentUser] = useState<User | null>(null);
  27 │   const [loading, setLoading] = useState(true);
  28 │   const [error, setError] = useState<string | null>(null);
  29 │   const session = useSession();
  30 │   useEffect(() => {
  31 │     if (session.data) {
  32 │       const fetchUsers = async () => {
  33 │         try {
  34 │           setLoading(true);
  35 │           const response =
  36 │             session.data.user.role == "Admin"
  37 │               ? await fetch("/api/users")
  38 │               : await fetch("/api/users/me/friends?others=true");
  39 │           if (!response.ok) {
  40 │             throw new Error("Failed to fetch users");
  41 │           }
  42 │           const data = await response.json();
  43 │           if (session.data.user.role !== "Admin") {
  44 │             setUsers([
  45 │               ...data.data,
  46 │               {
  47 │                 _id: "6792d847811967dbede75c5b",
  48 │                 name: "Admin ",
  49 │                 email: "admin@admin.com",
  50 │                 cName: "talal@theappguys.com",
  51 │                 role: "Admin",
  52 │               },
  53 │             ]);
  54 │           } else {
  55 │             setUsers(data.data.filter((user) => user.role !== "Admin"));
  56 │           }
  57 │         } catch (error) {
  58 │           console.error("Error fetching users:", error);
  59 │           setError("Failed to load users");
  60 │         } finally {
  61 │           setLoading(false);
  62 │         }
  63 │       };
  64 │ 
  65 │       fetchUsers();
  66 │     }
  67 │   }, [session.data]);
  68 │ 
  69 │   useEffect(() => {
  70 │     if (session.data?.user?.id && session.data.user.name) {
  71 │       setCurrentUser({
  72 │         _id: session.data.user.id,
  73 │         name: session.data.user.name,
  74 │         profileImage: session.data.user.profileImage,
  75 │       });
  76 │     }
  77 │   }, [session.data]);
  78 │ 
  79 │   if (loading) {
  80 │     return (
  81 │       <UserDashboardLayout>
  82 │         <Box
  83 │           display="flex"
  84 │           justifyContent="center"
  85 │           alignItems="center"
  86 │           height="100vh"
  87 │         >
  88 │           <CircularProgress />
  89 │         </Box>
  90 │       </UserDashboardLayout>
  91 │     );
  92 │   }
  93 │ 
  94 │   if (error) {
  95 │     return (
  96 │       <UserDashboardLayout>
  97 │         <Box
  98 │           display="flex"
  99 │           justifyContent="center"
 100 │           alignItems="center"
 101 │           height="100vh"
 102 │         >
 103 │           {error}
 104 │         </Box>
 105 │       </UserDashboardLayout>
 106 │     );
 107 │   }
 108 │ 
 109 │   return (
 110 │     <UserDashboardLayout>
 111 │       <Box sx={{ flexGrow: 1, height: "calc(100vh - 100px)" }}>
 112 │         <Grid container spacing={2} sx={{ height: "100%" }}>
 113 │           <Grid item xs={3}>
 114 │             <Paper sx={{ height: "100%", overflow: "auto" }}>
 115 │               <List>
 116 │                 {users &&
 117 │                   users.map((user) => (
 118 │                     <ListItem
 119 │                       button
 120 │                       key={user._id}
 121 │                       selected={selectedUser?._id === user._id}
 122 │                       onClick={() => setSelectedUser(user)}
 123 │                     >
 124 │                       <ListItemAvatar>
 125 │                         <Avatar src={user.profileImage} />
 126 │                       </ListItemAvatar>
 127 │                       <ListItemText primary={user.name} />
 128 │                     </ListItem>
 129 │                   ))}
 130 │               </List>
 131 │             </Paper>
 132 │           </Grid>
 133 │           <Grid item xs={9}>
 134 │             <Paper sx={{ height: "100%" }}>
 135 │               {selectedUser && currentUser ? (
 136 │                 <ChatWindow currentUser={currentUser} receiver={selectedUser} />
 137 │               ) : (
 138 │                 <Box
 139 │                   sx={{
 140 │                     display: "flex",
 141 │                     justifyContent: "center",
 142 │                     alignItems: "center",
 143 │                     height: "100%",
 144 │                     color: "text.secondary",
 145 │                   }}
 146 │                 >
 147 │                   Select a user to start chatting
 148 │                 </Box>
 149 │               )}
 150 │             </Paper>
 151 │           </Grid>
 152 │         </Grid>
 153 │       </Box>
 154 │     </UserDashboardLayout>
 155 │   );
 156 │ }
 157 │ 
 158 │ import { useState, useEffect } from 'react';
 159 │ import { useSession } from 'next-auth/react';
 160 │ import { useRouter } from 'next/router';
 161 │ import UserDashboardLayout from '../components/layouts/UserDashboardLayout';
 162 │ import ChatWindow from '../components/chat/ChatWindow';
     ·        ─────┬────
     ·             ╰── `ChatWindow` redefined here
 163 │ import { Container } from 'reactstrap';
 164 │ 
 165 │ export default function Chat() {
     ╰────

  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/pages/chat.tsx:20:1]
  20 │       profileImage?: string;
  21 │     }
  22 │     
  23 │ ╭─▶ export default function ChatPage() {
  24 │ │     const [users, setUsers] = useState<User[]>([]);
  25 │ │     const [selectedUser, setSelectedUser] = useState<User | null>(null);
  26 │ │     const [currentUser, setCurrentUser] = useState<User | null>(null);
  27 │ │     const [loading, setLoading] = useState(true);
  28 │ │     const [error, setError] = useState<string | null>(null);
  29 │ │     const session = useSession();
  30 │ │     useEffect(() => {
  31 │ │       if (session.data) {
  32 │ │         const fetchUsers = async () => {
  33 │ │           try {
  34 │ │             setLoading(true);
  35 │ │             const response =
  36 │ │               session.data.user.role == "Admin"
  37 │ │                 ? await fetch("/api/users")
  38 │ │                 : await fetch("/api/users/me/friends?others=true");
  39 │ │             if (!response.ok) {
  40 │ │               throw new Error("Failed to fetch users");
  41 │ │             }
  42 │ │             const data = await response.json();
  43 │ │             if (session.data.user.role !== "Admin") {
  44 │ │               setUsers([
  45 │ │                 ...data.data,
  46 │ │                 {
  47 │ │                   _id: "6792d847811967dbede75c5b",
  48 │ │                   name: "Admin ",
  49 │ │                   email: "admin@admin.com",
  50 │ │                   cName: "talal@theappguys.com",
  51 │ │                   role: "Admin",
  52 │ │                 },
  53 │ │               ]);
  54 │ │             } else {
  55 │ │               setUsers(data.data.filter((user) => user.role !== "Admin"));
  56 │ │             }
  57 │ │           } catch (error) {
  58 │ │             console.error("Error fetching users:", error);
  59 │ │             setError("Failed to load users");
  60 │ │           } finally {
  61 │ │             setLoading(false);
  62 │ │           }
  63 │ │         };
  64 │ │   
  65 │ │         fetchUsers();
  66 │ │       }
  67 │ │     }, [session.data]);
  68 │ │   
  69 │ │     useEffect(() => {
  70 │ │       if (session.data?.user?.id && session.data.user.name) {
  71 │ │         setCurrentUser({
  72 │ │           _id: session.data.user.id,
  73 │ │           name: session.data.user.name,
  74 │ │           profileImage: session.data.user.profileImage,
  75 │ │         });
  76 │ │       }
  77 │ │     }, [session.data]);
  78 │ │   
  79 │ │     if (loading) {
  80 │ │       return (
  81 │ │         <UserDashboardLayout>
  82 │ │           <Box
  83 │ │             display="flex"
  84 │ │             justifyContent="center"
  85 │ │             alignItems="center"
  86 │ │             height="100vh"
  87 │ │           >
  88 │ │             <CircularProgress />
  89 │ │           </Box>
  90 │ │         </UserDashboardLayout>
  91 │ │       );
  92 │ │     }
  93 │ │   
  94 │ │     if (error) {
  95 │ │       return (
  96 │ │         <UserDashboardLayout>
  97 │ │           <Box
  98 │ │             display="flex"
  99 │ │             justifyContent="center"
 100 │ │             alignItems="center"
 101 │ │             height="100vh"
 102 │ │           >
 103 │ │             {error}
 104 │ │           </Box>
 105 │ │         </UserDashboardLayout>
 106 │ │       );
 107 │ │     }
 108 │ │   
 109 │ │     return (
 110 │ │       <UserDashboardLayout>
 111 │ │         <Box sx={{ flexGrow: 1, height: "calc(100vh - 100px)" }}>
 112 │ │           <Grid container spacing={2} sx={{ height: "100%" }}>
 113 │ │             <Grid item xs={3}>
 114 │ │               <Paper sx={{ height: "100%", overflow: "auto" }}>
 115 │ │                 <List>
 116 │ │                   {users &&
 117 │ │                     users.map((user) => (
 118 │ │                       <ListItem
 119 │ │                         button
 120 │ │                         key={user._id}
 121 │ │                         selected={selectedUser?._id === user._id}
 122 │ │                         onClick={() => setSelectedUser(user)}
 123 │ │                       >
 124 │ │                         <ListItemAvatar>
 125 │ │                           <Avatar src={user.profileImage} />
 126 │ │                         </ListItemAvatar>
 127 │ │                         <ListItemText primary={user.name} />
 128 │ │                       </ListItem>
 129 │ │                     ))}
 130 │ │                 </List>
 131 │ │               </Paper>
 132 │ │             </Grid>
 133 │ │             <Grid item xs={9}>
 134 │ │               <Paper sx={{ height: "100%" }}>
 135 │ │                 {selectedUser && currentUser ? (
 136 │ │                   <ChatWindow currentUser={currentUser} receiver={selectedUser} />
 137 │ │                 ) : (
 138 │ │                   <Box
 139 │ │                     sx={{
 140 │ │                       display: "flex",
 141 │ │                       justifyContent: "center",
 142 │ │                       alignItems: "center",
 143 │ │                       height: "100%",
 144 │ │                       color: "text.secondary",
 145 │ │                     }}
 146 │ │                   >
 147 │ │                     Select a user to start chatting
 148 │ │                   </Box>
 149 │ │                 )}
 150 │ │               </Paper>
 151 │ │             </Grid>
 152 │ │           </Grid>
 153 │ │         </Box>
 154 │ │       </UserDashboardLayout>
 155 │ │     );
 156 │ ├─▶ }
     · ╰──── previous exported here
 157 │     
 158 │     import { useState, useEffect } from 'react';
 159 │     import { useSession } from 'next-auth/react';
 160 │     import { useRouter } from 'next/router';
 161 │     import UserDashboardLayout from '../components/layouts/UserDashboardLayout';
 162 │     import ChatWindow from '../components/chat/ChatWindow';
 163 │     import { Container } from 'reactstrap';
 164 │     
 165 │ ╭─▶ export default function Chat() {
 166 │ │     const { data: session } = useSession();
 167 │ │     const router = useRouter();
 168 │ │     const { receiver } = router.query;
 169 │ │     const [receiverUser, setReceiverUser] = useState(null);
 170 │ │   
 171 │ │     useEffect(() => {
 172 │ │       const fetchReceiver = async () => {
 173 │ │         if (receiver) {
 174 │ │           const response = await fetch(`/api/users/${receiver}`);
 175 │ │           const data = await response.json();
 176 │ │           if (data.success) {
 177 │ │             setReceiverUser(data.data);
 178 │ │           }
 179 │ │         }
 180 │ │       };
 181 │ │   
 182 │ │       if (receiver) {
 183 │ │         fetchReceiver();
 184 │ │       }
 185 │ │     }, [receiver]);
 186 │ │   
 187 │ │     if (!session || !receiverUser) {
 188 │ │       return <div>Loading...</div>;
 189 │ │     }
 190 │ │   
 191 │ │     return (
 192 │ │       <UserDashboardLayout>
 193 │ │         <Container fluid className="p-4">
 194 │ │           <ChatWindow
 195 │ │             currentUser={session.user}
 196 │ │             receiver={receiverUser}
 197 │ │           />
 198 │ │         </Container>
 199 │ │       </UserDashboardLayout>
 200 │ │     );
 201 │ ├─▶ }
     · ╰──── exported more than once
     ╰────

Error: 
  ☞ Exported identifiers must be unique